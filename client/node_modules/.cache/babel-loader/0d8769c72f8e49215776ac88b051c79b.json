{"ast":null,"code":"var _jsxFileName = \"/Users/allen/Documents/GitHub/550project/client/src/pages/ActorPercent.js\";\nimport React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\nimport { Table, Pagination, Select, Row, Col, Divider, Slider, Rate } from 'antd';\nimport { RadarChart } from 'react-vis';\nimport { format } from 'd3-format';\nimport Chart from \"react-apexcharts\";\nimport MenuBar from '../components/MenuBar';\nimport { actorpct } from '../fetcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wideFormat = format('.3r');\nconst actorColumns = [//   {\n//       title: 'actor_id',\n//       dataIndex: 'actor_id',\n//       key: 'actor_id',\n//       sorter: (a, b) => a.actor_id.localeCompare(b.actor_id),\n//   },\n{\n  title: 'primaryName',\n  dataIndex: 'primaryName',\n  key: 'primaryName',\n  sorter: (a, b) => a.primaryName.localeCompare(b.primaryName) // render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>,\n\n}, {\n  title: 'mbti',\n  dataIndex: 'mbti',\n  key: 'mbti',\n  sorter: (a, b) => a.mbti.localeCompare(b.mbti)\n}, {\n  title: 'percentage',\n  dataIndex: 'percentage',\n  key: 'percentage',\n  sorter: (a, b) => a.count - b.count\n} // TASK 19: copy over your answers for tasks 7 - 9 to add columns for potential, club, and value\n];\n\nclass ActorPercentPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actor_id: '',\n      primaryNameQuery: '',\n      mbtiQuery: '',\n      percentageQuery: '',\n      actorsResults: [],\n      pctresults: [],\n      series: [],\n      options: {\n        chart: {\n          width: 380,\n          type: 'pie'\n        },\n        labels: [],\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }]\n      }\n    };\n    this.updateSearchResults = this.updateSearchResults.bind(this);\n    this.handlePrimaryNameQueryChange = this.handlePrimaryNameQueryChange.bind(this);\n    this.handleActorIdQueryChange = this.handleActorIdQueryChange.bind(this);\n    this.handlembtiQueryChange = this.handlembtiQueryChange.bind(this);\n    this.handlepercentageQueryChange = this.handlepercentageQueryChange.bind(this); // this.handleRatingChange = this.handleRatingChange.bind(this);\n    // this.handlePotentialChange = this.handlePotentialChange.bind(this);\n  } //   goToActorPtc(actid) {\n  //     window.location = `/actorpct/${actid}`\n  //   }\n\n\n  handleActorIdQueryChange(event) {\n    this.setState({\n      actor_id: event.target.value\n    });\n  }\n\n  handlePrimaryNameQueryChange(event) {\n    this.setState({\n      primaryNameQuery: event.target.value\n    });\n  }\n\n  handlembtiQueryChange(event) {\n    // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({\n      mbtiQuery: event.target.value\n    });\n  }\n\n  handlepercentageQueryChange(event) {\n    // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({\n      percentageQuery: event.target.value\n    });\n  }\n\n  updateSearchResults() {\n    //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\n    actorpct(this.state.actor_id).then(res => {\n      this.setState({\n        actorsResults: res.results\n      });\n    });\n  }\n\n  componentDidMount() {\n    const {\n      actid\n    } = this.props.match.params;\n    this.setState({\n      actor_id: actid\n    });\n    actorpct(actid).then(res => {\n      this.setState({\n        actorsResults: res.results\n      });\n    }); // for (let i = 0; i < this.setState.actorsResults.length(); i++){\n    //     this.series.append(this.setState.actorsResults[i].mbti);\n    //     this.options.labels.append(this.setState.actorsResults[i].percentage);\n    // }\n\n    console.log(res.results);\n    console.log(this.state.actorsResults);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '70vw',\n          margin: '0 auto',\n          marginTop: '5vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Actors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          dataSource: this.state.actorsResults,\n          columns: actorColumns,\n          pagination: {\n            pageSizeOptions: [5, 10],\n            defaultPageSize: 10,\n            showQuickJumper: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ActorPercentPage\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mixed-chart\",\n            children: /*#__PURE__*/_jsxDEV(Chart, {\n              options: this.state.options,\n              series: this.state.series,\n              type: \"pie\",\n              width: 380\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(ActorPercentPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/allen/Documents/GitHub/550project/client/src/pages/ActorPercent.js"],"names":["React","withRouter","Form","FormInput","FormGroup","Button","Card","CardBody","CardTitle","Progress","Table","Pagination","Select","Row","Col","Divider","Slider","Rate","RadarChart","format","Chart","MenuBar","actorpct","wideFormat","actorColumns","title","dataIndex","key","sorter","a","b","primaryName","localeCompare","mbti","count","ActorPercentPage","Component","constructor","props","state","actor_id","primaryNameQuery","mbtiQuery","percentageQuery","actorsResults","pctresults","series","options","chart","width","type","labels","responsive","breakpoint","legend","position","updateSearchResults","bind","handlePrimaryNameQueryChange","handleActorIdQueryChange","handlembtiQueryChange","handlepercentageQueryChange","event","setState","target","value","then","res","results","componentDidMount","actid","match","params","console","log","render","margin","marginTop","pageSizeOptions","defaultPageSize","showQuickJumper"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\nimport {\n    Table,\n    Pagination,\n    Select,\n    Row,\n    Col,\n    Divider,\n    Slider,\n    Rate \n} from 'antd'\nimport { RadarChart } from 'react-vis';\nimport { format } from 'd3-format';\nimport Chart from \"react-apexcharts\";\n\nimport MenuBar from '../components/MenuBar';\nimport { actorpct } from '../fetcher';\nconst wideFormat = format('.3r');\n\nconst actorColumns = [\n//   {\n//       title: 'actor_id',\n//       dataIndex: 'actor_id',\n//       key: 'actor_id',\n//       sorter: (a, b) => a.actor_id.localeCompare(b.actor_id),\n//   },\n  {\n    title: 'primaryName',\n    dataIndex: 'primaryName',\n    key: 'primaryName',\n    sorter: (a, b) => a.primaryName.localeCompare(b.primaryName),\n    // render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>,\n  },\n  {\n    title: 'mbti',\n    dataIndex: 'mbti',\n    key: 'mbti',\n    sorter: (a, b) => a.mbti.localeCompare(b.mbti),\n  },\n  {\n    title: 'percentage',\n    dataIndex: 'percentage',\n    key: 'percentage',\n    sorter: (a, b) => a.count - b.count,\n  }\n  // TASK 19: copy over your answers for tasks 7 - 9 to add columns for potential, club, and value\n];\n\nclass ActorPercentPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actor_id: '',\n      primaryNameQuery: '',\n      mbtiQuery: '',\n      percentageQuery: '',\n      actorsResults: [],\n      pctresults: [],\n      series: [],\n      options: {\n        chart: {\n            width: 380,\n            type: 'pie',\n        },\n        labels: [],\n        responsive: [{\n            breakpoint: 480,\n            options: {\n              chart: {\n                width: 200\n              },\n              legend: {\n                position: 'bottom'\n              }\n            }\n          }]\n      }\n    };\n    \n\n    this.updateSearchResults = this.updateSearchResults.bind(this);\n    \n    this.handlePrimaryNameQueryChange = this.handlePrimaryNameQueryChange.bind(this);\n    this.handleActorIdQueryChange = this.handleActorIdQueryChange.bind(this);\n    this.handlembtiQueryChange =\n      this.handlembtiQueryChange.bind(this);\n    this.handlepercentageQueryChange = this.handlepercentageQueryChange.bind(this);\n    // this.handleRatingChange = this.handleRatingChange.bind(this);\n    // this.handlePotentialChange = this.handlePotentialChange.bind(this);\n  }\n\n//   goToActorPtc(actid) {\n//     window.location = `/actorpct/${actid}`\n//   }\n\n  handleActorIdQueryChange(event){\n    this.setState({ actor_id: event.target.value });\n  }\n\n  handlePrimaryNameQueryChange(event) {\n    this.setState({ primaryNameQuery: event.target.value });\n  }\n\n  handlembtiQueryChange(event) {\n    // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({ mbtiQuery: event.target.value });\n  }\n\n  handlepercentageQueryChange(event) {\n    // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({ percentageQuery: event.target.value });\n  }\n\n  updateSearchResults() {\n    //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\n    actorpct(\n      this.state.actor_id\n    ).then((res) => {\n      this.setState({ actorsResults: res.results });\n    });\n    \n  }\n\n  componentDidMount() {\n    const { actid } = this.props.match.params;\n    this.setState({ actor_id: actid });\n    actorpct(\n        actid\n        ).then((res) => {\n          this.setState({ actorsResults: res.results });\n\n        });\n    // for (let i = 0; i < this.setState.actorsResults.length(); i++){\n    //     this.series.append(this.setState.actorsResults[i].mbti);\n    //     this.options.labels.append(this.setState.actorsResults[i].percentage);\n    // }\n    console.log(res.results);\n    console.log(this.state.actorsResults);\n\n  }\n\n  render() {\n    return (\n      <div>\n        <MenuBar />\n        {/* <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n            <Row>\n                <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n                    <label>Actor ID</label>\n                    <FormInput placeholder=\"nm000000\" value={this.state.actor_id} onChange={this.handleActorIdQueryChange} />\n                </FormGroup></Col>\n                <Col flex={2}><FormGroup style={{ width: '10vw' }}>\n                            <Button style={{ marginTop: '4vh' }} onClick={this.goToActorPtc(this.state.actor_id)}>Search</Button>\n                        </FormGroup></Col>\n            </Row>\n\n        </Form> */}\n        <Divider />\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Actors</h3>\n          <Table\n            dataSource={this.state.actorsResults}\n            columns={actorColumns}\n            pagination={{\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 10,\n              showQuickJumper: true,\n            }}\n          />\n        </div>\n        <Divider />\n        <div className=\"ActorPercentPage\">\n            <div className=\"row\">\n                <div className=\"mixed-chart\">\n                    <Chart options={this.state.options} series={this.state.series} type=\"pie\" width={380} />\n                </div>\n            </div>\n        </div>\n        {/* <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Percentage of MBTI types of characters the actor played </h3>\n          <Table\n            dataSource={this.state.pctresults}\n            columns={actorpctColumns}\n            pagination={{\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 10,\n              showQuickJumper: true,\n            }}\n          />\n          </div> */}\n\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ActorPercentPage);\n"]},"metadata":{},"sourceType":"module"}