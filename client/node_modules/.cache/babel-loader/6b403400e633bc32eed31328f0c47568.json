{"ast":null,"code":"var _jsxFileName = \"/Users/allen/Documents/GitHub/550project/client/src/pages/ActorPage.js\";\nimport React from 'react';\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from 'shards-react';\nimport { Table, Pagination, Select, Row, Col, Divider, Slider, Rate } from 'antd';\nimport { RadarChart } from 'react-vis';\nimport { format } from 'd3-format';\nimport MenuBar from '../components/MenuBar';\nimport { rankbymbti } from '../fetcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wideFormat = format('.3r');\nconst actorColumns = [{\n  title: 'actor_id',\n  dataIndex: 'actor_id',\n  key: 'actor_id' //   sorter: (a, b) => a.actor_id.localeCompare(b.actor_id),\n\n}, {\n  title: 'primaryName',\n  dataIndex: 'primaryName',\n  key: 'primaryName',\n  sorter: (a, b) => a.primaryName.localeCompare(b.primaryName) // render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>,\n\n}, {\n  title: 'mbti',\n  dataIndex: 'mbti',\n  key: 'mbti',\n  sorter: (a, b) => a.mbti.localeCompare(b.mbti)\n}, {\n  title: 'count',\n  dataIndex: 'count',\n  key: 'count',\n  sorter: (a, b) => a.count - b.count\n} // TASK 19: copy over your answers for tasks 7 - 9 to add columns for potential, club, and value\n];\n\nclass ActorPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actor_id: '',\n      primaryNameQuery: '',\n      mbtiQuery: '',\n      countQuery: '',\n      actorsResults: [],\n      pctresults: []\n    };\n    this.updateSearchResults = this.updateSearchResults.bind(this);\n    this.handlePrimaryNameQueryChange = this.handlePrimaryNameQueryChange.bind(this);\n    this.handleActorIdQueryChange = this.handleActorIdQueryChange.bind(this);\n    this.handlembtiQueryChange = this.handlembtiQueryChange.bind(this);\n    this.handleCountQueryChange = this.handleCountQueryChange.bind(this); // this.handleRatingChange = this.handleRatingChange.bind(this);\n    // this.handlePotentialChange = this.handlePotentialChange.bind(this);\n  }\n\n  goToActorPtc(actid) {\n    console.log(actid); // window.location = `/actorpct/${actid}`\n  }\n\n  handleActorIdQueryChange(event) {\n    this.setState({\n      actor_id: event.target.value\n    });\n  }\n\n  handlePrimaryNameQueryChange(event) {\n    this.setState({\n      primaryNameQuery: event.target.value\n    });\n  }\n\n  handlembtiQueryChange(event) {\n    // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({\n      mbtiQuery: event.target.value\n    });\n  }\n\n  handleCountQueryChange(event) {\n    // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({\n      countQuery: event.target.value\n    });\n  } //   handleRatingChange(value) {\n  //     this.setState({ ratingLowQuery: value[0] });\n  //     this.setState({ ratingHighQuery: value[1] });\n  //   }\n  //   handlePotentialChange(value) {\n  //     // TASK 22: parse value and update state variables appropriately. See handleRatingChange(value) for reference\n  //     this.setState({ potLowQuery: value[0] });\n  //     this.setState({ potHighQuery: value[1] });\n  //   }\n\n\n  updateSearchResults() {\n    //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\n    rankbymbti( //   this.state.nameQuery,\n    //   this.state.nationalityQuery,\n    //   this.state.clubQuery,\n    //   this.state.ratingHighQuery,\n    //   this.state.ratingLowQuery,\n    //   this.state.potHighQuery,\n    //   this.state.potLowQuery,\n    null).then(res => {\n      this.setState({\n        actorsResults: res.results\n      });\n    });\n    console.log(this.state.actorsResults);\n  }\n\n  componentDidMount() {\n    rankbymbti(null).then(res => {\n      this.setState({\n        actorsResults: res.results\n      });\n    });\n    console.log(this.state.actorsResults);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '70vw',\n          margin: '0 auto',\n          marginTop: '5vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Actors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          dataSource: this.state.actorsResults,\n          columns: actorColumns,\n          onRow: (record, rowIndex) => {\n            return {\n              onClick: event => {\n                this.goToMatch(record.actor_id);\n              } // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n\n            };\n          },\n          pagination: {\n            pageSizeOptions: [5, 10],\n            defaultPageSize: 10,\n            showQuickJumper: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ActorPage;","map":{"version":3,"sources":["/Users/allen/Documents/GitHub/550project/client/src/pages/ActorPage.js"],"names":["React","Form","FormInput","FormGroup","Button","Card","CardBody","CardTitle","Progress","Table","Pagination","Select","Row","Col","Divider","Slider","Rate","RadarChart","format","MenuBar","rankbymbti","wideFormat","actorColumns","title","dataIndex","key","sorter","a","b","primaryName","localeCompare","mbti","count","ActorPage","Component","constructor","props","state","actor_id","primaryNameQuery","mbtiQuery","countQuery","actorsResults","pctresults","updateSearchResults","bind","handlePrimaryNameQueryChange","handleActorIdQueryChange","handlembtiQueryChange","handleCountQueryChange","goToActorPtc","actid","console","log","event","setState","target","value","then","res","results","componentDidMount","render","width","margin","marginTop","record","rowIndex","onClick","goToMatch","pageSizeOptions","defaultPageSize","showQuickJumper"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  FormInput,\n  FormGroup,\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  Progress,\n} from 'shards-react';\n\nimport {\n  Table,\n  Pagination,\n  Select,\n  Row,\n  Col,\n  Divider,\n  Slider,\n  Rate,\n} from 'antd';\nimport { RadarChart } from 'react-vis';\nimport { format } from 'd3-format';\n\nimport MenuBar from '../components/MenuBar';\nimport { rankbymbti } from '../fetcher';\nconst wideFormat = format('.3r');\n\nconst actorColumns = [\n  {\n      title: 'actor_id',\n      dataIndex: 'actor_id',\n      key: 'actor_id',\n    //   sorter: (a, b) => a.actor_id.localeCompare(b.actor_id),\n  },\n  {\n    title: 'primaryName',\n    dataIndex: 'primaryName',\n    key: 'primaryName',\n    sorter: (a, b) => a.primaryName.localeCompare(b.primaryName),\n    // render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>,\n  },\n  {\n    title: 'mbti',\n    dataIndex: 'mbti',\n    key: 'mbti',\n    sorter: (a, b) => a.mbti.localeCompare(b.mbti),\n  },\n  {\n    title: 'count',\n    dataIndex: 'count',\n    key: 'count',\n    sorter: (a, b) => a.count - b.count,\n  }\n  // TASK 19: copy over your answers for tasks 7 - 9 to add columns for potential, club, and value\n];\n\nclass ActorPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actor_id: '',\n      primaryNameQuery: '',\n      mbtiQuery: '',\n      countQuery: '',\n      actorsResults: [],\n      pctresults: []\n    };\n    \n\n    this.updateSearchResults = this.updateSearchResults.bind(this);\n    \n    this.handlePrimaryNameQueryChange = this.handlePrimaryNameQueryChange.bind(this);\n    this.handleActorIdQueryChange = this.handleActorIdQueryChange.bind(this);\n    this.handlembtiQueryChange =\n      this.handlembtiQueryChange.bind(this);\n    this.handleCountQueryChange = this.handleCountQueryChange.bind(this);\n    // this.handleRatingChange = this.handleRatingChange.bind(this);\n    // this.handlePotentialChange = this.handlePotentialChange.bind(this);\n  }\n\n  goToActorPtc(actid) {\n    console.log(actid)\n    // window.location = `/actorpct/${actid}`\n  }\n\n  handleActorIdQueryChange(event){\n    this.setState({ actor_id: event.target.value });\n  }\n\n  handlePrimaryNameQueryChange(event) {\n    this.setState({ primaryNameQuery: event.target.value });\n  }\n\n  handlembtiQueryChange(event) {\n    // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({ mbtiQuery: event.target.value });\n  }\n\n  handleCountQueryChange(event) {\n    // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\n    this.setState({ countQuery: event.target.value });\n  }\n\n//   handleRatingChange(value) {\n//     this.setState({ ratingLowQuery: value[0] });\n//     this.setState({ ratingHighQuery: value[1] });\n//   }\n\n//   handlePotentialChange(value) {\n//     // TASK 22: parse value and update state variables appropriately. See handleRatingChange(value) for reference\n//     this.setState({ potLowQuery: value[0] });\n//     this.setState({ potHighQuery: value[1] });\n//   }\n\n  updateSearchResults() {\n    //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\n    rankbymbti(\n    //   this.state.nameQuery,\n    //   this.state.nationalityQuery,\n    //   this.state.clubQuery,\n    //   this.state.ratingHighQuery,\n    //   this.state.ratingLowQuery,\n    //   this.state.potHighQuery,\n    //   this.state.potLowQuery,\n      null\n\n    ).then((res) => {\n      this.setState({ actorsResults: res.results });\n    });\n    console.log(this.state.actorsResults);\n  }\n\n  componentDidMount() {\n    rankbymbti(\n          null\n        ).then((res) => {\n          this.setState({ actorsResults: res.results });\n        });\n    console.log(this.state.actorsResults);\n  }\n\n  render() {\n    return (\n      <div>\n        <MenuBar />\n        {/* <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\n            <Row>\n                <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\n                    <label>Actor ID</label>\n                    <FormInput placeholder=\"nm000000\" value={this.state.actor_id} onChange={this.handleActorIdQueryChange} />\n                </FormGroup></Col>\n                <Col flex={2}><FormGroup style={{ width: '10vw' }}>\n                            <Button style={{ marginTop: '4vh' }} onClick={this.goToActorPtc(this.state.actor_id)}>Search</Button>\n                        </FormGroup></Col>\n            </Row>\n\n        </Form> */}\n        <Divider />\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Actors</h3>\n          <Table\n            dataSource={this.state.actorsResults}\n            columns={actorColumns}\n            onRow={(record, rowIndex) => {\n                return {\n                  onClick: event => {this.goToMatch(record.actor_id)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n                };\n              }}\n            pagination={{\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 10,\n              showQuickJumper: true,\n            }}\n          />\n        </div>\n        {/* <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Percentage of MBTI types of characters the actor played </h3>\n          <Table\n            dataSource={this.state.pctresults}\n            columns={actorpctColumns}\n            pagination={{\n              pageSizeOptions: [5, 10],\n              defaultPageSize: 10,\n              showQuickJumper: true,\n            }}\n          />\n          </div> */}\n\n      </div>\n    );\n  }\n}\n\nexport default ActorPage;\n"]},"metadata":{},"sourceType":"module"}